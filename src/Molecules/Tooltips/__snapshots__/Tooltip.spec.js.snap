// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tooltip should render correctly 1`] = `
<Tooltip
  duration={150}
  placement="top"
  text="My Tooltip"
>
  <Manager>
    <Reference>
      <InnerReference
        getReferenceRef={[Function]}
      >
        <div
          onMouseLeave={[Function]}
          onMouseMove={[Function]}
        >
          My Tooltip
        </div>
      </InnerReference>
    </Reference>
    <Popper
      placement="top"
    >
      <InnerPopper
        eventsEnabled={true}
        placement="top"
        positionFixed={false}
        referenceElement={
          <div>
            My Tooltip
          </div>
        }
      >
        <CSSTransition
          classNames="fade"
          in={false}
          onExited={[Function]}
          timeout={150}
          unmountOnExit={true}
        >
          <Transition
            appear={false}
            enter={true}
            exit={true}
            in={false}
            mountOnEnter={false}
            onEnter={[Function]}
            onEntered={[Function]}
            onEntering={[Function]}
            onExit={[Function]}
            onExited={[Function]}
            onExiting={[Function]}
            timeout={150}
            unmountOnExit={true}
          />
        </CSSTransition>
      </InnerPopper>
    </Popper>
  </Manager>
</Tooltip>
`;

exports[`Tooltip should render correctly with placement 1`] = `
<Tooltip
  duration={150}
  placement="left"
  text="My Tooltip"
>
  <Manager>
    <Reference>
      <InnerReference
        getReferenceRef={[Function]}
      >
        <div
          onMouseLeave={[Function]}
          onMouseMove={[Function]}
        >
          My Tooltip
        </div>
      </InnerReference>
    </Reference>
    <Popper
      placement="left"
    >
      <InnerPopper
        eventsEnabled={true}
        placement="left"
        positionFixed={false}
        referenceElement={
          <div>
            My Tooltip
          </div>
        }
      >
        <CSSTransition
          classNames="fade"
          in={false}
          onExited={[Function]}
          timeout={150}
          unmountOnExit={true}
        >
          <Transition
            appear={false}
            enter={true}
            exit={true}
            in={false}
            mountOnEnter={false}
            onEnter={[Function]}
            onEntered={[Function]}
            onEntering={[Function]}
            onExit={[Function]}
            onExited={[Function]}
            onExiting={[Function]}
            timeout={150}
            unmountOnExit={true}
          />
        </CSSTransition>
      </InnerPopper>
    </Popper>
  </Manager>
</Tooltip>
`;

exports[`Tooltip should render correctly with renderTrigger 1`] = `
.c0 {
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  color: black;
  padding: 1rem;
  font-weight: 600;
}

<Tooltip
  duration={150}
  placement="bottom"
  renderTrigger={[Function]}
>
  <Manager>
    <Reference>
      <InnerReference
        getReferenceRef={[Function]}
      >
        <div
          onMouseLeave={[Function]}
          onMouseMove={[Function]}
        >
          <styled.div
            active={false}
          >
            <StyledComponent
              active={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htpNat",
                    "isStatic": false,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  font-family: 'IBM Plex Sans', 'Helvetica Neue', Arial, sans-serif;
  ",
                      [Function],
                      ";
  padding: 1rem;
  font-weight: 600;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htpNat",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c0"
              >
                Custom trigger!
              </div>
            </StyledComponent>
          </styled.div>
        </div>
      </InnerReference>
    </Reference>
    <Popper
      placement="bottom"
    >
      <InnerPopper
        eventsEnabled={true}
        placement="bottom"
        positionFixed={false}
        referenceElement={
          .c0 {
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  color: black;
  padding: 1rem;
  font-weight: 600;
}

<div>
            <div
              class="c0"
            >
              Custom trigger!
            </div>
          </div>
        }
      >
        <CSSTransition
          classNames="fade"
          in={false}
          onExited={[Function]}
          timeout={150}
          unmountOnExit={true}
        >
          <Transition
            appear={false}
            enter={true}
            exit={true}
            in={false}
            mountOnEnter={false}
            onEnter={[Function]}
            onEntered={[Function]}
            onEntering={[Function]}
            onExit={[Function]}
            onExited={[Function]}
            onExiting={[Function]}
            timeout={150}
            unmountOnExit={true}
          />
        </CSSTransition>
      </InnerPopper>
    </Popper>
  </Manager>
</Tooltip>
`;
