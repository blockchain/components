// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SearchBar should render correctly 1`] = `
.c3 {
  fill: #98A1B2;
  cursor: default;
}

.c3:hover {
  fill: #98A1B2;
}

.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  position: relative;
}

.c6 {
  display: block;
  height: 2.7rem;
  width: 100%;
  padding: 0 1rem;
  box-sizing: border-box;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  color: #353F52;
  border-width: 1px;
  border-color: #DFE3EB;
  border-style: solid;
  border-radius: 0.255rem;
  background-color: #FFF;
  background-image: none;
  outline-width: 0;
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c6:disabled {
  color: #353F52;
  border-color: #DFE3EB;
  background: #F0F2F7;
  cursor: not-allowed;
}

.c6:active:not(:disabled),
.c6:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #619FF7;
}

.c6::-webkit-input-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6::-moz-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6:-ms-input-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6::placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 100%;
  background-color: #FFF;
  box-shadow: 0 2px 8px 1px rgba(3,17,47,0.6);
  border-radius: 0.125rem;
}

.c1 {
  position: absolute;
  top: 50%;
  left: 1rem;
  margin-top: -10px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: inherit;
  border-color: transparent;
}

.c2 {
  fill: #121D33;
}

.c2:hover {
  fill: #121D33;
}

.c4 > input {
  height: 3.5rem;
  padding-left: 3rem;
  background-color: inherit;
  border-color: transparent;
}

.c4 > input:focus,
.c4 > input:active {
  box-shadow: none !important;
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: auto;
  min-width: 4rem;
  height: 3.5rem;
  padding: 1rem;
  box-sizing: border-box;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1.5rem;
  font-weight: 600;
  color: #121D33;
  background-color: #FFB266;
  border-top-right-radius: 0.125rem;
  border-bottom-right-radius: 0.125rem;
  white-space: nowrap;
}

.c7:hover {
  background-color: #FFB266;
  cursor: pointer;
}

<SearchBar
  e2e="defaultSearchBar"
  renderSubmit={[Function]}
  width="100%"
>
  <styled.div
    width="100%"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-irJFYO",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  box-shadow: 0 2px 8px 1px ",
              [Function],
              ";
  border-radius: 0.125rem;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-irJFYO",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      width="100%"
    >
      <div
        className="c0"
        width="100%"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jXmkxr",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  position: absolute;
  top: 50%;
  left: 1rem;
  margin-top: -10px;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  background-color: inherit;
  border-color: transparent;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jXmkxr",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c1"
            >
              <Styled(FasSearch)
                selectable={false}
                size="20px"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-SpTIZ",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  fill: ",
                          [Function],
                          ";

  &:hover {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "Styled(FasSearch)",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-SpTIZ",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  forwardedRef={null}
                  selectable={false}
                  size="20px"
                >
                  <FasSearch
                    className="c2"
                    selectable={false}
                    size="20px"
                  >
                    <Styled(SvgFasSearch)
                      className="c2"
                      height="20px"
                      selectable={0}
                      width="20px"
                    >
                      <StyledComponent
                        className="c2"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-hCBoUX",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
    ",
                                "
  fill: ",
                                [Function],
                                ";
  cursor: ",
                                [Function],
                                ";

  &:hover {
    fill: ",
                                [Function],
                                ";
  }
",
                                ";
  ",
                              ],
                            },
                            "displayName": "Styled(SvgFasSearch)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-hCBoUX",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                            Symbol(Symbol.hasInstance): [Function],
                          }
                        }
                        forwardedRef={null}
                        height="20px"
                        selectable={0}
                        width="20px"
                      >
                        <SvgFasSearch
                          className="c2 c3"
                          height="20px"
                          selectable={0}
                          width="20px"
                        >
                          <svg
                            className="c2 c3"
                            height="20px"
                            selectable={0}
                            viewBox="0 0 512 512"
                            width="20px"
                          >
                            <path
                              d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"
                            />
                          </svg>
                        </SvgFasSearch>
                      </StyledComponent>
                    </Styled(SvgFasSearch)>
                  </FasSearch>
                </StyledComponent>
              </Styled(FasSearch)>
            </div>
          </StyledComponent>
        </styled.div>
        <Styled(Component)
          e2e="defaultSearchBar.Input"
        >
          <StyledComponent
            e2e="defaultSearchBar.Input"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ejfVCH",
                  "isStatic": true,
                  "lastClassName": "c4",
                  "rules": Array [
                    "
  & > input {
    height: 3.5rem;
    padding-left: 3rem;
    background-color: inherit;
    border-color: transparent;

    &:focus,
    &:active {
      box-shadow: none !important;
    }
  }
",
                  ],
                },
                "displayName": "Styled(Component)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ejfVCH",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <ForwardRef(InputWithRef)
              className="c4"
              e2e="defaultSearchBar.Input"
            >
              <Input
                className="c4"
                disabled={false}
                e2e="defaultSearchBar.Input"
                forwardRef={null}
                type="text"
                width="100%"
              >
                <styled.div
                  className="c4"
                  width="100%"
                >
                  <StyledComponent
                    className="c4"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kPMMwu",
                          "isStatic": false,
                          "lastClassName": "c5",
                          "rules": Array [
                            "
  display: flex;
  flex-direction: column;
  width: ",
                            [Function],
                            ";
  position: relative;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kPMMwu",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    width="100%"
                  >
                    <div
                      className="c4 c5"
                      width="100%"
                    >
                      <styled.input
                        disabled={false}
                        e2e="defaultSearchBar.Input"
                        type="text"
                        width="100%"
                      >
                        <StyledComponent
                          disabled={false}
                          e2e="defaultSearchBar.Input"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-joZmNN",
                                "isStatic": false,
                                "lastClassName": "c6",
                                "rules": Array [
                                  "
  display: block;
  height: 2.7rem;
  width: ",
                                  [Function],
                                  ";
  padding: 0 1rem;
  box-sizing: border-box;
  font-family: ",
                                  [Function],
                                  ";
  font-size: ",
                                  [Function],
                                  ";
  color: ",
                                  [Function],
                                  ";
  border-width: 1px;
  border-color: ",
                                  [Function],
                                  ";
  border-style: solid;
  border-radius: ",
                                  [Function],
                                  ";
  background-color: ",
                                  [Function],
                                  ";
  background-image: none;
  outline-width: 0;
  user-select: text;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                                  [Function],
                                  ";
    border-color: ",
                                  [Function],
                                  ";
    background: ",
                                  [Function],
                                  ";
    cursor: not-allowed;
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                                  [Function],
                                  ";
  }

  &::placeholder {
    color: ",
                                  [Function],
                                  ";
    font-size: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-joZmNN",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          type="text"
                          width="100%"
                        >
                          <input
                            className="c6"
                            data-e2e="defaultSearchBar.Input"
                            disabled={false}
                            type="text"
                            width="100%"
                          />
                        </StyledComponent>
                      </styled.input>
                    </div>
                  </StyledComponent>
                </styled.div>
              </Input>
            </ForwardRef(InputWithRef)>
          </StyledComponent>
        </Styled(Component)>
        <styled.div
          e2e="defaultSearchBar.Button"
        >
          <StyledComponent
            e2e="defaultSearchBar.Button"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dTpUTz",
                  "isStatic": false,
                  "lastClassName": "c7",
                  "rules": Array [
                    "
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: auto;
  min-width: 4rem;
  height: 3.5rem;
  padding: 1rem;
  box-sizing: border-box;
  font-family: ",
                    [Function],
                    ";
  font-size: ",
                    [Function],
                    ";
  font-weight: 600;
  color: ",
                    [Function],
                    ";
  background-color: ",
                    [Function],
                    ";
  border-top-right-radius: 0.125rem;
  border-bottom-right-radius: 0.125rem;
  white-space: nowrap;

  &:hover {
    background-color: ",
                    [Function],
                    ";
    cursor: pointer;
  }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dTpUTz",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c7"
              data-e2e="defaultSearchBar.Button"
            >
              <GoLabel>
                Go
              </GoLabel>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</SearchBar>
`;

exports[`SearchBar should render correctly with e2e 1`] = `
.c3 {
  fill: #98A1B2;
  cursor: default;
}

.c3:hover {
  fill: #98A1B2;
}

.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  position: relative;
}

.c6 {
  display: block;
  height: 2.7rem;
  width: 100%;
  padding: 0 1rem;
  box-sizing: border-box;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  color: #353F52;
  border-width: 1px;
  border-color: #DFE3EB;
  border-style: solid;
  border-radius: 0.255rem;
  background-color: #FFF;
  background-image: none;
  outline-width: 0;
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c6:disabled {
  color: #353F52;
  border-color: #DFE3EB;
  background: #F0F2F7;
  cursor: not-allowed;
}

.c6:active:not(:disabled),
.c6:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #619FF7;
}

.c6::-webkit-input-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6::-moz-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6:-ms-input-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6::placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 100%;
  background-color: #FFF;
  box-shadow: 0 2px 8px 1px rgba(3,17,47,0.6);
  border-radius: 0.125rem;
}

.c1 {
  position: absolute;
  top: 50%;
  left: 1rem;
  margin-top: -10px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: inherit;
  border-color: transparent;
}

.c2 {
  fill: #121D33;
}

.c2:hover {
  fill: #121D33;
}

.c4 > input {
  height: 3.5rem;
  padding-left: 3rem;
  background-color: inherit;
  border-color: transparent;
}

.c4 > input:focus,
.c4 > input:active {
  box-shadow: none !important;
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: auto;
  min-width: 4rem;
  height: 3.5rem;
  padding: 1rem;
  box-sizing: border-box;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1.5rem;
  font-weight: 600;
  color: #121D33;
  background-color: #FFB266;
  border-top-right-radius: 0.125rem;
  border-bottom-right-radius: 0.125rem;
  white-space: nowrap;
}

.c7:hover {
  background-color: #FFB266;
  cursor: pointer;
}

<SearchBar
  e2e={null}
  renderSubmit={[Function]}
  width="100%"
>
  <styled.div
    width="100%"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-irJFYO",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  box-shadow: 0 2px 8px 1px ",
              [Function],
              ";
  border-radius: 0.125rem;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-irJFYO",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      width="100%"
    >
      <div
        className="c0"
        width="100%"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jXmkxr",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  position: absolute;
  top: 50%;
  left: 1rem;
  margin-top: -10px;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  background-color: inherit;
  border-color: transparent;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jXmkxr",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c1"
            >
              <Styled(FasSearch)
                selectable={false}
                size="20px"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-SpTIZ",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  fill: ",
                          [Function],
                          ";

  &:hover {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "Styled(FasSearch)",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-SpTIZ",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  forwardedRef={null}
                  selectable={false}
                  size="20px"
                >
                  <FasSearch
                    className="c2"
                    selectable={false}
                    size="20px"
                  >
                    <Styled(SvgFasSearch)
                      className="c2"
                      height="20px"
                      selectable={0}
                      width="20px"
                    >
                      <StyledComponent
                        className="c2"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-hCBoUX",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
    ",
                                "
  fill: ",
                                [Function],
                                ";
  cursor: ",
                                [Function],
                                ";

  &:hover {
    fill: ",
                                [Function],
                                ";
  }
",
                                ";
  ",
                              ],
                            },
                            "displayName": "Styled(SvgFasSearch)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-hCBoUX",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                            Symbol(Symbol.hasInstance): [Function],
                          }
                        }
                        forwardedRef={null}
                        height="20px"
                        selectable={0}
                        width="20px"
                      >
                        <SvgFasSearch
                          className="c2 c3"
                          height="20px"
                          selectable={0}
                          width="20px"
                        >
                          <svg
                            className="c2 c3"
                            height="20px"
                            selectable={0}
                            viewBox="0 0 512 512"
                            width="20px"
                          >
                            <path
                              d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"
                            />
                          </svg>
                        </SvgFasSearch>
                      </StyledComponent>
                    </Styled(SvgFasSearch)>
                  </FasSearch>
                </StyledComponent>
              </Styled(FasSearch)>
            </div>
          </StyledComponent>
        </styled.div>
        <Styled(Component)
          e2e=".Input"
        >
          <StyledComponent
            e2e=".Input"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ejfVCH",
                  "isStatic": true,
                  "lastClassName": "c4",
                  "rules": Array [
                    "
  & > input {
    height: 3.5rem;
    padding-left: 3rem;
    background-color: inherit;
    border-color: transparent;

    &:focus,
    &:active {
      box-shadow: none !important;
    }
  }
",
                  ],
                },
                "displayName": "Styled(Component)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ejfVCH",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <ForwardRef(InputWithRef)
              className="c4"
              e2e=".Input"
            >
              <Input
                className="c4"
                disabled={false}
                e2e=".Input"
                forwardRef={null}
                type="text"
                width="100%"
              >
                <styled.div
                  className="c4"
                  width="100%"
                >
                  <StyledComponent
                    className="c4"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kPMMwu",
                          "isStatic": false,
                          "lastClassName": "c5",
                          "rules": Array [
                            "
  display: flex;
  flex-direction: column;
  width: ",
                            [Function],
                            ";
  position: relative;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kPMMwu",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    width="100%"
                  >
                    <div
                      className="c4 c5"
                      width="100%"
                    >
                      <styled.input
                        disabled={false}
                        e2e=".Input"
                        type="text"
                        width="100%"
                      >
                        <StyledComponent
                          disabled={false}
                          e2e=".Input"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-joZmNN",
                                "isStatic": false,
                                "lastClassName": "c6",
                                "rules": Array [
                                  "
  display: block;
  height: 2.7rem;
  width: ",
                                  [Function],
                                  ";
  padding: 0 1rem;
  box-sizing: border-box;
  font-family: ",
                                  [Function],
                                  ";
  font-size: ",
                                  [Function],
                                  ";
  color: ",
                                  [Function],
                                  ";
  border-width: 1px;
  border-color: ",
                                  [Function],
                                  ";
  border-style: solid;
  border-radius: ",
                                  [Function],
                                  ";
  background-color: ",
                                  [Function],
                                  ";
  background-image: none;
  outline-width: 0;
  user-select: text;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                                  [Function],
                                  ";
    border-color: ",
                                  [Function],
                                  ";
    background: ",
                                  [Function],
                                  ";
    cursor: not-allowed;
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                                  [Function],
                                  ";
  }

  &::placeholder {
    color: ",
                                  [Function],
                                  ";
    font-size: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-joZmNN",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          type="text"
                          width="100%"
                        >
                          <input
                            className="c6"
                            data-e2e=".Input"
                            disabled={false}
                            type="text"
                            width="100%"
                          />
                        </StyledComponent>
                      </styled.input>
                    </div>
                  </StyledComponent>
                </styled.div>
              </Input>
            </ForwardRef(InputWithRef)>
          </StyledComponent>
        </Styled(Component)>
        <styled.div
          e2e=".Button"
        >
          <StyledComponent
            e2e=".Button"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dTpUTz",
                  "isStatic": false,
                  "lastClassName": "c7",
                  "rules": Array [
                    "
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: auto;
  min-width: 4rem;
  height: 3.5rem;
  padding: 1rem;
  box-sizing: border-box;
  font-family: ",
                    [Function],
                    ";
  font-size: ",
                    [Function],
                    ";
  font-weight: 600;
  color: ",
                    [Function],
                    ";
  background-color: ",
                    [Function],
                    ";
  border-top-right-radius: 0.125rem;
  border-bottom-right-radius: 0.125rem;
  white-space: nowrap;

  &:hover {
    background-color: ",
                    [Function],
                    ";
    cursor: pointer;
  }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dTpUTz",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c7"
              data-e2e=".Button"
            >
              <GoLabel>
                Go
              </GoLabel>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</SearchBar>
`;

exports[`SearchBar should render correctly with onChange 1`] = `
.c3 {
  fill: #98A1B2;
  cursor: default;
}

.c3:hover {
  fill: #98A1B2;
}

.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  position: relative;
}

.c6 {
  display: block;
  height: 2.7rem;
  width: 100%;
  padding: 0 1rem;
  box-sizing: border-box;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  color: #353F52;
  border-width: 1px;
  border-color: #DFE3EB;
  border-style: solid;
  border-radius: 0.255rem;
  background-color: #FFF;
  background-image: none;
  outline-width: 0;
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c6:disabled {
  color: #353F52;
  border-color: #DFE3EB;
  background: #F0F2F7;
  cursor: not-allowed;
}

.c6:active:not(:disabled),
.c6:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #619FF7;
}

.c6::-webkit-input-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6::-moz-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6:-ms-input-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6::placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 100%;
  background-color: #FFF;
  box-shadow: 0 2px 8px 1px rgba(3,17,47,0.6);
  border-radius: 0.125rem;
}

.c1 {
  position: absolute;
  top: 50%;
  left: 1rem;
  margin-top: -10px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: inherit;
  border-color: transparent;
}

.c2 {
  fill: #121D33;
}

.c2:hover {
  fill: #121D33;
}

.c4 > input {
  height: 3.5rem;
  padding-left: 3rem;
  background-color: inherit;
  border-color: transparent;
}

.c4 > input:focus,
.c4 > input:active {
  box-shadow: none !important;
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: auto;
  min-width: 4rem;
  height: 3.5rem;
  padding: 1rem;
  box-sizing: border-box;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1.5rem;
  font-weight: 600;
  color: #121D33;
  background-color: #FFB266;
  border-top-right-radius: 0.125rem;
  border-bottom-right-radius: 0.125rem;
  white-space: nowrap;
}

.c7:hover {
  background-color: #FFB266;
  cursor: pointer;
}

<SearchBar
  e2e="defaultSearchBar"
  onChange={[MockFunction]}
  renderSubmit={[Function]}
  width="100%"
>
  <styled.div
    width="100%"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-irJFYO",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  box-shadow: 0 2px 8px 1px ",
              [Function],
              ";
  border-radius: 0.125rem;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-irJFYO",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      width="100%"
    >
      <div
        className="c0"
        width="100%"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jXmkxr",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  position: absolute;
  top: 50%;
  left: 1rem;
  margin-top: -10px;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  background-color: inherit;
  border-color: transparent;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jXmkxr",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c1"
            >
              <Styled(FasSearch)
                selectable={false}
                size="20px"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-SpTIZ",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  fill: ",
                          [Function],
                          ";

  &:hover {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "Styled(FasSearch)",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-SpTIZ",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  forwardedRef={null}
                  selectable={false}
                  size="20px"
                >
                  <FasSearch
                    className="c2"
                    selectable={false}
                    size="20px"
                  >
                    <Styled(SvgFasSearch)
                      className="c2"
                      height="20px"
                      selectable={0}
                      width="20px"
                    >
                      <StyledComponent
                        className="c2"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-hCBoUX",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
    ",
                                "
  fill: ",
                                [Function],
                                ";
  cursor: ",
                                [Function],
                                ";

  &:hover {
    fill: ",
                                [Function],
                                ";
  }
",
                                ";
  ",
                              ],
                            },
                            "displayName": "Styled(SvgFasSearch)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-hCBoUX",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                            Symbol(Symbol.hasInstance): [Function],
                          }
                        }
                        forwardedRef={null}
                        height="20px"
                        selectable={0}
                        width="20px"
                      >
                        <SvgFasSearch
                          className="c2 c3"
                          height="20px"
                          selectable={0}
                          width="20px"
                        >
                          <svg
                            className="c2 c3"
                            height="20px"
                            selectable={0}
                            viewBox="0 0 512 512"
                            width="20px"
                          >
                            <path
                              d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"
                            />
                          </svg>
                        </SvgFasSearch>
                      </StyledComponent>
                    </Styled(SvgFasSearch)>
                  </FasSearch>
                </StyledComponent>
              </Styled(FasSearch)>
            </div>
          </StyledComponent>
        </styled.div>
        <Styled(Component)
          e2e="defaultSearchBar.Input"
          onChange={[MockFunction]}
        >
          <StyledComponent
            e2e="defaultSearchBar.Input"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ejfVCH",
                  "isStatic": true,
                  "lastClassName": "c4",
                  "rules": Array [
                    "
  & > input {
    height: 3.5rem;
    padding-left: 3rem;
    background-color: inherit;
    border-color: transparent;

    &:focus,
    &:active {
      box-shadow: none !important;
    }
  }
",
                  ],
                },
                "displayName": "Styled(Component)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ejfVCH",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onChange={[MockFunction]}
          >
            <ForwardRef(InputWithRef)
              className="c4"
              e2e="defaultSearchBar.Input"
              onChange={[MockFunction]}
            >
              <Input
                className="c4"
                disabled={false}
                e2e="defaultSearchBar.Input"
                forwardRef={null}
                onChange={[MockFunction]}
                type="text"
                width="100%"
              >
                <styled.div
                  className="c4"
                  width="100%"
                >
                  <StyledComponent
                    className="c4"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kPMMwu",
                          "isStatic": false,
                          "lastClassName": "c5",
                          "rules": Array [
                            "
  display: flex;
  flex-direction: column;
  width: ",
                            [Function],
                            ";
  position: relative;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kPMMwu",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    width="100%"
                  >
                    <div
                      className="c4 c5"
                      width="100%"
                    >
                      <styled.input
                        disabled={false}
                        e2e="defaultSearchBar.Input"
                        onChange={[MockFunction]}
                        type="text"
                        width="100%"
                      >
                        <StyledComponent
                          disabled={false}
                          e2e="defaultSearchBar.Input"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-joZmNN",
                                "isStatic": false,
                                "lastClassName": "c6",
                                "rules": Array [
                                  "
  display: block;
  height: 2.7rem;
  width: ",
                                  [Function],
                                  ";
  padding: 0 1rem;
  box-sizing: border-box;
  font-family: ",
                                  [Function],
                                  ";
  font-size: ",
                                  [Function],
                                  ";
  color: ",
                                  [Function],
                                  ";
  border-width: 1px;
  border-color: ",
                                  [Function],
                                  ";
  border-style: solid;
  border-radius: ",
                                  [Function],
                                  ";
  background-color: ",
                                  [Function],
                                  ";
  background-image: none;
  outline-width: 0;
  user-select: text;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                                  [Function],
                                  ";
    border-color: ",
                                  [Function],
                                  ";
    background: ",
                                  [Function],
                                  ";
    cursor: not-allowed;
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                                  [Function],
                                  ";
  }

  &::placeholder {
    color: ",
                                  [Function],
                                  ";
    font-size: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-joZmNN",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[MockFunction]}
                          type="text"
                          width="100%"
                        >
                          <input
                            className="c6"
                            data-e2e="defaultSearchBar.Input"
                            disabled={false}
                            onChange={[MockFunction]}
                            type="text"
                            width="100%"
                          />
                        </StyledComponent>
                      </styled.input>
                    </div>
                  </StyledComponent>
                </styled.div>
              </Input>
            </ForwardRef(InputWithRef)>
          </StyledComponent>
        </Styled(Component)>
        <styled.div
          e2e="defaultSearchBar.Button"
        >
          <StyledComponent
            e2e="defaultSearchBar.Button"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dTpUTz",
                  "isStatic": false,
                  "lastClassName": "c7",
                  "rules": Array [
                    "
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: auto;
  min-width: 4rem;
  height: 3.5rem;
  padding: 1rem;
  box-sizing: border-box;
  font-family: ",
                    [Function],
                    ";
  font-size: ",
                    [Function],
                    ";
  font-weight: 600;
  color: ",
                    [Function],
                    ";
  background-color: ",
                    [Function],
                    ";
  border-top-right-radius: 0.125rem;
  border-bottom-right-radius: 0.125rem;
  white-space: nowrap;

  &:hover {
    background-color: ",
                    [Function],
                    ";
    cursor: pointer;
  }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dTpUTz",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c7"
              data-e2e="defaultSearchBar.Button"
            >
              <GoLabel>
                Go
              </GoLabel>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</SearchBar>
`;

exports[`SearchBar should render correctly with onClick 1`] = `
.c3 {
  fill: #98A1B2;
  cursor: default;
}

.c3:hover {
  fill: #98A1B2;
}

.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  position: relative;
}

.c6 {
  display: block;
  height: 2.7rem;
  width: 100%;
  padding: 0 1rem;
  box-sizing: border-box;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  color: #353F52;
  border-width: 1px;
  border-color: #DFE3EB;
  border-style: solid;
  border-radius: 0.255rem;
  background-color: #FFF;
  background-image: none;
  outline-width: 0;
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c6:disabled {
  color: #353F52;
  border-color: #DFE3EB;
  background: #F0F2F7;
  cursor: not-allowed;
}

.c6:active:not(:disabled),
.c6:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #619FF7;
}

.c6::-webkit-input-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6::-moz-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6:-ms-input-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6::placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 100%;
  background-color: #FFF;
  box-shadow: 0 2px 8px 1px rgba(3,17,47,0.6);
  border-radius: 0.125rem;
}

.c1 {
  position: absolute;
  top: 50%;
  left: 1rem;
  margin-top: -10px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: inherit;
  border-color: transparent;
}

.c2 {
  fill: #121D33;
}

.c2:hover {
  fill: #121D33;
}

.c4 > input {
  height: 3.5rem;
  padding-left: 3rem;
  background-color: inherit;
  border-color: transparent;
}

.c4 > input:focus,
.c4 > input:active {
  box-shadow: none !important;
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: auto;
  min-width: 4rem;
  height: 3.5rem;
  padding: 1rem;
  box-sizing: border-box;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1.5rem;
  font-weight: 600;
  color: #121D33;
  background-color: #FFB266;
  border-top-right-radius: 0.125rem;
  border-bottom-right-radius: 0.125rem;
  white-space: nowrap;
}

.c7:hover {
  background-color: #FFB266;
  cursor: pointer;
}

<SearchBar
  e2e="defaultSearchBar"
  onClick={[MockFunction]}
  renderSubmit={[Function]}
  width="100%"
>
  <styled.div
    width="100%"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-irJFYO",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  box-shadow: 0 2px 8px 1px ",
              [Function],
              ";
  border-radius: 0.125rem;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-irJFYO",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      width="100%"
    >
      <div
        className="c0"
        width="100%"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jXmkxr",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  position: absolute;
  top: 50%;
  left: 1rem;
  margin-top: -10px;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  background-color: inherit;
  border-color: transparent;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jXmkxr",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c1"
            >
              <Styled(FasSearch)
                selectable={false}
                size="20px"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-SpTIZ",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  fill: ",
                          [Function],
                          ";

  &:hover {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "Styled(FasSearch)",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-SpTIZ",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  forwardedRef={null}
                  selectable={false}
                  size="20px"
                >
                  <FasSearch
                    className="c2"
                    selectable={false}
                    size="20px"
                  >
                    <Styled(SvgFasSearch)
                      className="c2"
                      height="20px"
                      selectable={0}
                      width="20px"
                    >
                      <StyledComponent
                        className="c2"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-hCBoUX",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
    ",
                                "
  fill: ",
                                [Function],
                                ";
  cursor: ",
                                [Function],
                                ";

  &:hover {
    fill: ",
                                [Function],
                                ";
  }
",
                                ";
  ",
                              ],
                            },
                            "displayName": "Styled(SvgFasSearch)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-hCBoUX",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                            Symbol(Symbol.hasInstance): [Function],
                          }
                        }
                        forwardedRef={null}
                        height="20px"
                        selectable={0}
                        width="20px"
                      >
                        <SvgFasSearch
                          className="c2 c3"
                          height="20px"
                          selectable={0}
                          width="20px"
                        >
                          <svg
                            className="c2 c3"
                            height="20px"
                            selectable={0}
                            viewBox="0 0 512 512"
                            width="20px"
                          >
                            <path
                              d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"
                            />
                          </svg>
                        </SvgFasSearch>
                      </StyledComponent>
                    </Styled(SvgFasSearch)>
                  </FasSearch>
                </StyledComponent>
              </Styled(FasSearch)>
            </div>
          </StyledComponent>
        </styled.div>
        <Styled(Component)
          e2e="defaultSearchBar.Input"
        >
          <StyledComponent
            e2e="defaultSearchBar.Input"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ejfVCH",
                  "isStatic": true,
                  "lastClassName": "c4",
                  "rules": Array [
                    "
  & > input {
    height: 3.5rem;
    padding-left: 3rem;
    background-color: inherit;
    border-color: transparent;

    &:focus,
    &:active {
      box-shadow: none !important;
    }
  }
",
                  ],
                },
                "displayName": "Styled(Component)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ejfVCH",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <ForwardRef(InputWithRef)
              className="c4"
              e2e="defaultSearchBar.Input"
            >
              <Input
                className="c4"
                disabled={false}
                e2e="defaultSearchBar.Input"
                forwardRef={null}
                type="text"
                width="100%"
              >
                <styled.div
                  className="c4"
                  width="100%"
                >
                  <StyledComponent
                    className="c4"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kPMMwu",
                          "isStatic": false,
                          "lastClassName": "c5",
                          "rules": Array [
                            "
  display: flex;
  flex-direction: column;
  width: ",
                            [Function],
                            ";
  position: relative;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kPMMwu",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    width="100%"
                  >
                    <div
                      className="c4 c5"
                      width="100%"
                    >
                      <styled.input
                        disabled={false}
                        e2e="defaultSearchBar.Input"
                        type="text"
                        width="100%"
                      >
                        <StyledComponent
                          disabled={false}
                          e2e="defaultSearchBar.Input"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-joZmNN",
                                "isStatic": false,
                                "lastClassName": "c6",
                                "rules": Array [
                                  "
  display: block;
  height: 2.7rem;
  width: ",
                                  [Function],
                                  ";
  padding: 0 1rem;
  box-sizing: border-box;
  font-family: ",
                                  [Function],
                                  ";
  font-size: ",
                                  [Function],
                                  ";
  color: ",
                                  [Function],
                                  ";
  border-width: 1px;
  border-color: ",
                                  [Function],
                                  ";
  border-style: solid;
  border-radius: ",
                                  [Function],
                                  ";
  background-color: ",
                                  [Function],
                                  ";
  background-image: none;
  outline-width: 0;
  user-select: text;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                                  [Function],
                                  ";
    border-color: ",
                                  [Function],
                                  ";
    background: ",
                                  [Function],
                                  ";
    cursor: not-allowed;
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                                  [Function],
                                  ";
  }

  &::placeholder {
    color: ",
                                  [Function],
                                  ";
    font-size: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-joZmNN",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          type="text"
                          width="100%"
                        >
                          <input
                            className="c6"
                            data-e2e="defaultSearchBar.Input"
                            disabled={false}
                            type="text"
                            width="100%"
                          />
                        </StyledComponent>
                      </styled.input>
                    </div>
                  </StyledComponent>
                </styled.div>
              </Input>
            </ForwardRef(InputWithRef)>
          </StyledComponent>
        </Styled(Component)>
        <styled.div
          e2e="defaultSearchBar.Button"
          onClick={[MockFunction]}
        >
          <StyledComponent
            e2e="defaultSearchBar.Button"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dTpUTz",
                  "isStatic": false,
                  "lastClassName": "c7",
                  "rules": Array [
                    "
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: auto;
  min-width: 4rem;
  height: 3.5rem;
  padding: 1rem;
  box-sizing: border-box;
  font-family: ",
                    [Function],
                    ";
  font-size: ",
                    [Function],
                    ";
  font-weight: 600;
  color: ",
                    [Function],
                    ";
  background-color: ",
                    [Function],
                    ";
  border-top-right-radius: 0.125rem;
  border-bottom-right-radius: 0.125rem;
  white-space: nowrap;

  &:hover {
    background-color: ",
                    [Function],
                    ";
    cursor: pointer;
  }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dTpUTz",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onClick={[MockFunction]}
          >
            <div
              className="c7"
              data-e2e="defaultSearchBar.Button"
              onClick={[MockFunction]}
            >
              <GoLabel>
                Go
              </GoLabel>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</SearchBar>
`;

exports[`SearchBar should render correctly with value 1`] = `
.c3 {
  fill: #98A1B2;
  cursor: default;
}

.c3:hover {
  fill: #98A1B2;
}

.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  position: relative;
}

.c6 {
  display: block;
  height: 2.7rem;
  width: 100%;
  padding: 0 1rem;
  box-sizing: border-box;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  color: #353F52;
  border-width: 1px;
  border-color: #DFE3EB;
  border-style: solid;
  border-radius: 0.255rem;
  background-color: #FFF;
  background-image: none;
  outline-width: 0;
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c6:disabled {
  color: #353F52;
  border-color: #DFE3EB;
  background: #F0F2F7;
  cursor: not-allowed;
}

.c6:active:not(:disabled),
.c6:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #619FF7;
}

.c6::-webkit-input-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6::-moz-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6:-ms-input-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6::placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 100%;
  background-color: #FFF;
  box-shadow: 0 2px 8px 1px rgba(3,17,47,0.6);
  border-radius: 0.125rem;
}

.c1 {
  position: absolute;
  top: 50%;
  left: 1rem;
  margin-top: -10px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: inherit;
  border-color: transparent;
}

.c2 {
  fill: #121D33;
}

.c2:hover {
  fill: #121D33;
}

.c4 > input {
  height: 3.5rem;
  padding-left: 3rem;
  background-color: inherit;
  border-color: transparent;
}

.c4 > input:focus,
.c4 > input:active {
  box-shadow: none !important;
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: auto;
  min-width: 4rem;
  height: 3.5rem;
  padding: 1rem;
  box-sizing: border-box;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1.5rem;
  font-weight: 600;
  color: #121D33;
  background-color: #FFB266;
  border-top-right-radius: 0.125rem;
  border-bottom-right-radius: 0.125rem;
  white-space: nowrap;
}

.c7:hover {
  background-color: #FFB266;
  cursor: pointer;
}

<SearchBar
  e2e="defaultSearchBar"
  onChange={[MockFunction]}
  renderSubmit={[Function]}
  value="My search"
  width="100%"
>
  <styled.div
    width="100%"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-irJFYO",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  box-shadow: 0 2px 8px 1px ",
              [Function],
              ";
  border-radius: 0.125rem;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-irJFYO",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      width="100%"
    >
      <div
        className="c0"
        width="100%"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jXmkxr",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  position: absolute;
  top: 50%;
  left: 1rem;
  margin-top: -10px;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  background-color: inherit;
  border-color: transparent;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jXmkxr",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c1"
            >
              <Styled(FasSearch)
                selectable={false}
                size="20px"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-SpTIZ",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  fill: ",
                          [Function],
                          ";

  &:hover {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "Styled(FasSearch)",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-SpTIZ",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  forwardedRef={null}
                  selectable={false}
                  size="20px"
                >
                  <FasSearch
                    className="c2"
                    selectable={false}
                    size="20px"
                  >
                    <Styled(SvgFasSearch)
                      className="c2"
                      height="20px"
                      selectable={0}
                      width="20px"
                    >
                      <StyledComponent
                        className="c2"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-hCBoUX",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
    ",
                                "
  fill: ",
                                [Function],
                                ";
  cursor: ",
                                [Function],
                                ";

  &:hover {
    fill: ",
                                [Function],
                                ";
  }
",
                                ";
  ",
                              ],
                            },
                            "displayName": "Styled(SvgFasSearch)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-hCBoUX",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                            Symbol(Symbol.hasInstance): [Function],
                          }
                        }
                        forwardedRef={null}
                        height="20px"
                        selectable={0}
                        width="20px"
                      >
                        <SvgFasSearch
                          className="c2 c3"
                          height="20px"
                          selectable={0}
                          width="20px"
                        >
                          <svg
                            className="c2 c3"
                            height="20px"
                            selectable={0}
                            viewBox="0 0 512 512"
                            width="20px"
                          >
                            <path
                              d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"
                            />
                          </svg>
                        </SvgFasSearch>
                      </StyledComponent>
                    </Styled(SvgFasSearch)>
                  </FasSearch>
                </StyledComponent>
              </Styled(FasSearch)>
            </div>
          </StyledComponent>
        </styled.div>
        <Styled(Component)
          e2e="defaultSearchBar.Input"
          onChange={[MockFunction]}
          value="My search"
        >
          <StyledComponent
            e2e="defaultSearchBar.Input"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ejfVCH",
                  "isStatic": true,
                  "lastClassName": "c4",
                  "rules": Array [
                    "
  & > input {
    height: 3.5rem;
    padding-left: 3rem;
    background-color: inherit;
    border-color: transparent;

    &:focus,
    &:active {
      box-shadow: none !important;
    }
  }
",
                  ],
                },
                "displayName": "Styled(Component)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ejfVCH",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onChange={[MockFunction]}
            value="My search"
          >
            <ForwardRef(InputWithRef)
              className="c4"
              e2e="defaultSearchBar.Input"
              onChange={[MockFunction]}
              value="My search"
            >
              <Input
                className="c4"
                disabled={false}
                e2e="defaultSearchBar.Input"
                forwardRef={null}
                onChange={[MockFunction]}
                type="text"
                value="My search"
                width="100%"
              >
                <styled.div
                  className="c4"
                  width="100%"
                >
                  <StyledComponent
                    className="c4"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kPMMwu",
                          "isStatic": false,
                          "lastClassName": "c5",
                          "rules": Array [
                            "
  display: flex;
  flex-direction: column;
  width: ",
                            [Function],
                            ";
  position: relative;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kPMMwu",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    width="100%"
                  >
                    <div
                      className="c4 c5"
                      width="100%"
                    >
                      <styled.input
                        disabled={false}
                        e2e="defaultSearchBar.Input"
                        onChange={[MockFunction]}
                        type="text"
                        value="My search"
                        width="100%"
                      >
                        <StyledComponent
                          disabled={false}
                          e2e="defaultSearchBar.Input"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-joZmNN",
                                "isStatic": false,
                                "lastClassName": "c6",
                                "rules": Array [
                                  "
  display: block;
  height: 2.7rem;
  width: ",
                                  [Function],
                                  ";
  padding: 0 1rem;
  box-sizing: border-box;
  font-family: ",
                                  [Function],
                                  ";
  font-size: ",
                                  [Function],
                                  ";
  color: ",
                                  [Function],
                                  ";
  border-width: 1px;
  border-color: ",
                                  [Function],
                                  ";
  border-style: solid;
  border-radius: ",
                                  [Function],
                                  ";
  background-color: ",
                                  [Function],
                                  ";
  background-image: none;
  outline-width: 0;
  user-select: text;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                                  [Function],
                                  ";
    border-color: ",
                                  [Function],
                                  ";
    background: ",
                                  [Function],
                                  ";
    cursor: not-allowed;
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                                  [Function],
                                  ";
  }

  &::placeholder {
    color: ",
                                  [Function],
                                  ";
    font-size: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-joZmNN",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[MockFunction]}
                          type="text"
                          value="My search"
                          width="100%"
                        >
                          <input
                            className="c6"
                            data-e2e="defaultSearchBar.Input"
                            disabled={false}
                            onChange={[MockFunction]}
                            type="text"
                            value="My search"
                            width="100%"
                          />
                        </StyledComponent>
                      </styled.input>
                    </div>
                  </StyledComponent>
                </styled.div>
              </Input>
            </ForwardRef(InputWithRef)>
          </StyledComponent>
        </Styled(Component)>
        <styled.div
          e2e="defaultSearchBar.Button"
        >
          <StyledComponent
            e2e="defaultSearchBar.Button"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dTpUTz",
                  "isStatic": false,
                  "lastClassName": "c7",
                  "rules": Array [
                    "
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: auto;
  min-width: 4rem;
  height: 3.5rem;
  padding: 1rem;
  box-sizing: border-box;
  font-family: ",
                    [Function],
                    ";
  font-size: ",
                    [Function],
                    ";
  font-weight: 600;
  color: ",
                    [Function],
                    ";
  background-color: ",
                    [Function],
                    ";
  border-top-right-radius: 0.125rem;
  border-bottom-right-radius: 0.125rem;
  white-space: nowrap;

  &:hover {
    background-color: ",
                    [Function],
                    ";
    cursor: pointer;
  }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dTpUTz",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c7"
              data-e2e="defaultSearchBar.Button"
            >
              <GoLabel>
                Go
              </GoLabel>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</SearchBar>
`;

exports[`SearchBar should render correctly with width 1`] = `
.c3 {
  fill: #98A1B2;
  cursor: default;
}

.c3:hover {
  fill: #98A1B2;
}

.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  position: relative;
}

.c6 {
  display: block;
  height: 2.7rem;
  width: 100%;
  padding: 0 1rem;
  box-sizing: border-box;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  color: #353F52;
  border-width: 1px;
  border-color: #DFE3EB;
  border-style: solid;
  border-radius: 0.255rem;
  background-color: #FFF;
  background-image: none;
  outline-width: 0;
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  user-select: text;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c6:disabled {
  color: #353F52;
  border-color: #DFE3EB;
  background: #F0F2F7;
  cursor: not-allowed;
}

.c6:active:not(:disabled),
.c6:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #619FF7;
}

.c6::-webkit-input-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6::-moz-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6:-ms-input-placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c6::placeholder {
  color: #98A1B2;
  font-size: 0.875rem;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 200px;
  background-color: #FFF;
  box-shadow: 0 2px 8px 1px rgba(3,17,47,0.6);
  border-radius: 0.125rem;
}

.c1 {
  position: absolute;
  top: 50%;
  left: 1rem;
  margin-top: -10px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: inherit;
  border-color: transparent;
}

.c2 {
  fill: #121D33;
}

.c2:hover {
  fill: #121D33;
}

.c4 > input {
  height: 3.5rem;
  padding-left: 3rem;
  background-color: inherit;
  border-color: transparent;
}

.c4 > input:focus,
.c4 > input:active {
  box-shadow: none !important;
}

.c7 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: auto;
  min-width: 4rem;
  height: 3.5rem;
  padding: 1rem;
  box-sizing: border-box;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1.5rem;
  font-weight: 600;
  color: #121D33;
  background-color: #FFB266;
  border-top-right-radius: 0.125rem;
  border-bottom-right-radius: 0.125rem;
  white-space: nowrap;
}

.c7:hover {
  background-color: #FFB266;
  cursor: pointer;
}

<SearchBar
  e2e="defaultSearchBar"
  onChange={[MockFunction]}
  renderSubmit={[Function]}
  value="My search"
  width="200px"
>
  <styled.div
    width="200px"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-irJFYO",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  position: relative;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  box-shadow: 0 2px 8px 1px ",
              [Function],
              ";
  border-radius: 0.125rem;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-irJFYO",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      width="200px"
    >
      <div
        className="c0"
        width="200px"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jXmkxr",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  position: absolute;
  top: 50%;
  left: 1rem;
  margin-top: -10px;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  background-color: inherit;
  border-color: transparent;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-jXmkxr",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c1"
            >
              <Styled(FasSearch)
                selectable={false}
                size="20px"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-SpTIZ",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "
  fill: ",
                          [Function],
                          ";

  &:hover {
    fill: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "Styled(FasSearch)",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-SpTIZ",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    }
                  }
                  forwardedRef={null}
                  selectable={false}
                  size="20px"
                >
                  <FasSearch
                    className="c2"
                    selectable={false}
                    size="20px"
                  >
                    <Styled(SvgFasSearch)
                      className="c2"
                      height="20px"
                      selectable={0}
                      width="20px"
                    >
                      <StyledComponent
                        className="c2"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-hCBoUX",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
    ",
                                "
  fill: ",
                                [Function],
                                ";
  cursor: ",
                                [Function],
                                ";

  &:hover {
    fill: ",
                                [Function],
                                ";
  }
",
                                ";
  ",
                              ],
                            },
                            "displayName": "Styled(SvgFasSearch)",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-hCBoUX",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                            Symbol(Symbol.hasInstance): [Function],
                          }
                        }
                        forwardedRef={null}
                        height="20px"
                        selectable={0}
                        width="20px"
                      >
                        <SvgFasSearch
                          className="c2 c3"
                          height="20px"
                          selectable={0}
                          width="20px"
                        >
                          <svg
                            className="c2 c3"
                            height="20px"
                            selectable={0}
                            viewBox="0 0 512 512"
                            width="20px"
                          >
                            <path
                              d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"
                            />
                          </svg>
                        </SvgFasSearch>
                      </StyledComponent>
                    </Styled(SvgFasSearch)>
                  </FasSearch>
                </StyledComponent>
              </Styled(FasSearch)>
            </div>
          </StyledComponent>
        </styled.div>
        <Styled(Component)
          e2e="defaultSearchBar.Input"
          onChange={[MockFunction]}
          value="My search"
        >
          <StyledComponent
            e2e="defaultSearchBar.Input"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ejfVCH",
                  "isStatic": true,
                  "lastClassName": "c4",
                  "rules": Array [
                    "
  & > input {
    height: 3.5rem;
    padding-left: 3rem;
    background-color: inherit;
    border-color: transparent;

    &:focus,
    &:active {
      box-shadow: none !important;
    }
  }
",
                  ],
                },
                "displayName": "Styled(Component)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ejfVCH",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onChange={[MockFunction]}
            value="My search"
          >
            <ForwardRef(InputWithRef)
              className="c4"
              e2e="defaultSearchBar.Input"
              onChange={[MockFunction]}
              value="My search"
            >
              <Input
                className="c4"
                disabled={false}
                e2e="defaultSearchBar.Input"
                forwardRef={null}
                onChange={[MockFunction]}
                type="text"
                value="My search"
                width="100%"
              >
                <styled.div
                  className="c4"
                  width="100%"
                >
                  <StyledComponent
                    className="c4"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kPMMwu",
                          "isStatic": false,
                          "lastClassName": "c5",
                          "rules": Array [
                            "
  display: flex;
  flex-direction: column;
  width: ",
                            [Function],
                            ";
  position: relative;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kPMMwu",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    width="100%"
                  >
                    <div
                      className="c4 c5"
                      width="100%"
                    >
                      <styled.input
                        disabled={false}
                        e2e="defaultSearchBar.Input"
                        onChange={[MockFunction]}
                        type="text"
                        value="My search"
                        width="100%"
                      >
                        <StyledComponent
                          disabled={false}
                          e2e="defaultSearchBar.Input"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-joZmNN",
                                "isStatic": false,
                                "lastClassName": "c6",
                                "rules": Array [
                                  "
  display: block;
  height: 2.7rem;
  width: ",
                                  [Function],
                                  ";
  padding: 0 1rem;
  box-sizing: border-box;
  font-family: ",
                                  [Function],
                                  ";
  font-size: ",
                                  [Function],
                                  ";
  color: ",
                                  [Function],
                                  ";
  border-width: 1px;
  border-color: ",
                                  [Function],
                                  ";
  border-style: solid;
  border-radius: ",
                                  [Function],
                                  ";
  background-color: ",
                                  [Function],
                                  ";
  background-image: none;
  outline-width: 0;
  user-select: text;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                                  [Function],
                                  ";
    border-color: ",
                                  [Function],
                                  ";
    background: ",
                                  [Function],
                                  ";
    cursor: not-allowed;
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                                  [Function],
                                  ";
  }

  &::placeholder {
    color: ",
                                  [Function],
                                  ";
    font-size: ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-joZmNN",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[MockFunction]}
                          type="text"
                          value="My search"
                          width="100%"
                        >
                          <input
                            className="c6"
                            data-e2e="defaultSearchBar.Input"
                            disabled={false}
                            onChange={[MockFunction]}
                            type="text"
                            value="My search"
                            width="100%"
                          />
                        </StyledComponent>
                      </styled.input>
                    </div>
                  </StyledComponent>
                </styled.div>
              </Input>
            </ForwardRef(InputWithRef)>
          </StyledComponent>
        </Styled(Component)>
        <styled.div
          e2e="defaultSearchBar.Button"
        >
          <StyledComponent
            e2e="defaultSearchBar.Button"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dTpUTz",
                  "isStatic": false,
                  "lastClassName": "c7",
                  "rules": Array [
                    "
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: auto;
  min-width: 4rem;
  height: 3.5rem;
  padding: 1rem;
  box-sizing: border-box;
  font-family: ",
                    [Function],
                    ";
  font-size: ",
                    [Function],
                    ";
  font-weight: 600;
  color: ",
                    [Function],
                    ";
  background-color: ",
                    [Function],
                    ";
  border-top-right-radius: 0.125rem;
  border-bottom-right-radius: 0.125rem;
  white-space: nowrap;

  &:hover {
    background-color: ",
                    [Function],
                    ";
    cursor: pointer;
  }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dTpUTz",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c7"
              data-e2e="defaultSearchBar.Button"
            >
              <GoLabel>
                Go
              </GoLabel>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</SearchBar>
`;
