// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SingleDropdown should render correctly 1`] = `
.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
}

.c0::after {
  content: '';
  position: absolute;
  right: 1rem;
  bottom: 1.15rem;
  width: 0;
  height: 0;
  border-left: 0.4rem solid transparent;
  border-right: 0.4rem solid transparent;
  border-top: 0.4rem solid #545456;
  pointer-events: none;
}

.c1 {
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: #545456;
  background-color: #FFF;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  font-style: normal;
  border-width: 1px;
  border-color: #CCC;
  border-style: solid;
  border-radius: 0.25rem;
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c1:disabled {
  color: #545456;
  border-color: #CCC;
  background: #F8F8F8;
  cursor: not-allowed;
}

.c1:required:invalid {
  color: #999B9E;
}

.c1 option[value=''][disabled] {
  display: none;
}

.c1 option {
  color: #545456;
}

.c1:active:not(:disabled),
.c1:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #10ADE4;
}

<ForwardRef(SingleDropdownWithRef)
  items={
    Array [
      Object {
        "text": "Item1",
        "value": 1,
      },
      Object {
        "text": "Item2",
        "value": 2,
      },
      Object {
        "text": "Item3",
        "value": 3,
      },
      Object {
        "text": "Item4",
        "value": 4,
      },
      Object {
        "text": "Item5",
        "value": 5,
      },
      Object {
        "text": "Item6",
        "value": 6,
      },
      Object {
        "text": "Item7",
        "value": 7,
      },
      Object {
        "text": "Item8",
        "value": 8,
      },
      Object {
        "text": "Item9",
        "value": 9,
      },
    ]
  }
  onChange={[MockFunction]}
>
  <SingleDropdown
    capitalize={false}
    forwardRef={null}
    italic={false}
    items={
      Array [
        Object {
          "text": "Item1",
          "value": 1,
        },
        Object {
          "text": "Item2",
          "value": 2,
        },
        Object {
          "text": "Item3",
          "value": 3,
        },
        Object {
          "text": "Item4",
          "value": 4,
        },
        Object {
          "text": "Item5",
          "value": 5,
        },
        Object {
          "text": "Item6",
          "value": 6,
        },
        Object {
          "text": "Item7",
          "value": 7,
        },
        Object {
          "text": "Item8",
          "value": 8,
        },
        Object {
          "text": "Item9",
          "value": 9,
        },
      ]
    }
    onChange={[MockFunction]}
    uppercase={false}
    width="100%"
  >
    <styled.div
      width="100%"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-iwsKbI",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                "
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100%;
  width: ",
                [Function],
                ";
  box-sizing: border-box;

  &::after {
    content: '';
    position: absolute;
    right: 1rem;
    bottom: 1.15rem;
    width: 0;
    height: 0;
    border-left: 0.4rem solid transparent;
    border-right: 0.4rem solid transparent;
    border-top: 0.4rem solid ",
                [Function],
                ";
    pointer-events: none;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-iwsKbI",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        width="100%"
      >
        <div
          className="c0"
          width="100%"
        >
          <styled.select
            capitalize={false}
            italic={false}
            onChange={[MockFunction]}
            uppercase={false}
          >
            <StyledComponent
              capitalize={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gZMcBi",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: ",
                      [Function],
                      ";
  background-color: ",
                      [Function],
                      ";
  appearance: none;
  font-family: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  font-style: ",
                      [Function],
                      ";
  border-width: 1px;
  border-color: ",
                      [Function],
                      ";
  border-style: solid;
  border-radius: ",
                      [Function],
                      ";
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    background: ",
                      [Function],
                      ";
    cursor: not-allowed;
  }

  &:required:invalid {
    color: ",
                      [Function],
                      ";
  }

  option[value=''][disabled] {
    display: none;
  }

  option {
    color: ",
                      [Function],
                      ";
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.select",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gZMcBi",
                  "target": "select",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              italic={false}
              onChange={[MockFunction]}
              uppercase={false}
            >
              <select
                className="c1"
                onChange={[MockFunction]}
              >
                <option
                  key="1"
                  value={1}
                >
                  Item1
                </option>
                <option
                  key="2"
                  value={2}
                >
                  Item2
                </option>
                <option
                  key="3"
                  value={3}
                >
                  Item3
                </option>
                <option
                  key="4"
                  value={4}
                >
                  Item4
                </option>
                <option
                  key="5"
                  value={5}
                >
                  Item5
                </option>
                <option
                  key="6"
                  value={6}
                >
                  Item6
                </option>
                <option
                  key="7"
                  value={7}
                >
                  Item7
                </option>
                <option
                  key="8"
                  value={8}
                >
                  Item8
                </option>
                <option
                  key="9"
                  value={9}
                >
                  Item9
                </option>
              </select>
            </StyledComponent>
          </styled.select>
        </div>
      </StyledComponent>
    </styled.div>
  </SingleDropdown>
</ForwardRef(SingleDropdownWithRef)>
`;

exports[`SingleDropdown should render correctly with capitalize 1`] = `
.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
}

.c0::after {
  content: '';
  position: absolute;
  right: 1rem;
  bottom: 1.15rem;
  width: 0;
  height: 0;
  border-left: 0.4rem solid transparent;
  border-right: 0.4rem solid transparent;
  border-top: 0.4rem solid #545456;
  pointer-events: none;
}

.c1 {
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: #545456;
  background-color: #FFF;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  font-style: normal;
  border-width: 1px;
  border-color: #CCC;
  border-style: solid;
  border-radius: 0.25rem;
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c1:disabled {
  color: #545456;
  border-color: #CCC;
  background: #F8F8F8;
  cursor: not-allowed;
}

.c1:required:invalid {
  color: #999B9E;
}

.c1 option[value=''][disabled] {
  display: none;
}

.c1 option {
  color: #545456;
}

.c1:active:not(:disabled),
.c1:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #10ADE4;
}

<ForwardRef(SingleDropdownWithRef)
  capitalize={true}
  items={
    Array [
      Object {
        "text": "Item1",
        "value": 1,
      },
      Object {
        "text": "Item2",
        "value": 2,
      },
      Object {
        "text": "Item3",
        "value": 3,
      },
      Object {
        "text": "Item4",
        "value": 4,
      },
      Object {
        "text": "Item5",
        "value": 5,
      },
      Object {
        "text": "Item6",
        "value": 6,
      },
      Object {
        "text": "Item7",
        "value": 7,
      },
      Object {
        "text": "Item8",
        "value": 8,
      },
      Object {
        "text": "Item9",
        "value": 9,
      },
    ]
  }
  onChange={[MockFunction]}
>
  <SingleDropdown
    capitalize={true}
    forwardRef={null}
    italic={false}
    items={
      Array [
        Object {
          "text": "Item1",
          "value": 1,
        },
        Object {
          "text": "Item2",
          "value": 2,
        },
        Object {
          "text": "Item3",
          "value": 3,
        },
        Object {
          "text": "Item4",
          "value": 4,
        },
        Object {
          "text": "Item5",
          "value": 5,
        },
        Object {
          "text": "Item6",
          "value": 6,
        },
        Object {
          "text": "Item7",
          "value": 7,
        },
        Object {
          "text": "Item8",
          "value": 8,
        },
        Object {
          "text": "Item9",
          "value": 9,
        },
      ]
    }
    onChange={[MockFunction]}
    uppercase={false}
    width="100%"
  >
    <styled.div
      width="100%"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-iwsKbI",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                "
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100%;
  width: ",
                [Function],
                ";
  box-sizing: border-box;

  &::after {
    content: '';
    position: absolute;
    right: 1rem;
    bottom: 1.15rem;
    width: 0;
    height: 0;
    border-left: 0.4rem solid transparent;
    border-right: 0.4rem solid transparent;
    border-top: 0.4rem solid ",
                [Function],
                ";
    pointer-events: none;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-iwsKbI",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        width="100%"
      >
        <div
          className="c0"
          width="100%"
        >
          <styled.select
            capitalize={true}
            italic={false}
            onChange={[MockFunction]}
            uppercase={false}
          >
            <StyledComponent
              capitalize={true}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gZMcBi",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: ",
                      [Function],
                      ";
  background-color: ",
                      [Function],
                      ";
  appearance: none;
  font-family: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  font-style: ",
                      [Function],
                      ";
  border-width: 1px;
  border-color: ",
                      [Function],
                      ";
  border-style: solid;
  border-radius: ",
                      [Function],
                      ";
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    background: ",
                      [Function],
                      ";
    cursor: not-allowed;
  }

  &:required:invalid {
    color: ",
                      [Function],
                      ";
  }

  option[value=''][disabled] {
    display: none;
  }

  option {
    color: ",
                      [Function],
                      ";
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.select",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gZMcBi",
                  "target": "select",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              italic={false}
              onChange={[MockFunction]}
              uppercase={false}
            >
              <select
                className="c1"
                onChange={[MockFunction]}
              >
                <option
                  key="1"
                  value={1}
                >
                  Item1
                </option>
                <option
                  key="2"
                  value={2}
                >
                  Item2
                </option>
                <option
                  key="3"
                  value={3}
                >
                  Item3
                </option>
                <option
                  key="4"
                  value={4}
                >
                  Item4
                </option>
                <option
                  key="5"
                  value={5}
                >
                  Item5
                </option>
                <option
                  key="6"
                  value={6}
                >
                  Item6
                </option>
                <option
                  key="7"
                  value={7}
                >
                  Item7
                </option>
                <option
                  key="8"
                  value={8}
                >
                  Item8
                </option>
                <option
                  key="9"
                  value={9}
                >
                  Item9
                </option>
              </select>
            </StyledComponent>
          </styled.select>
        </div>
      </StyledComponent>
    </styled.div>
  </SingleDropdown>
</ForwardRef(SingleDropdownWithRef)>
`;

exports[`SingleDropdown should render correctly with error="error" 1`] = `
.c1 {
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 0.875rem;
  padding-bottom: 0.5rem;
  color: #F36331;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
}

.c0::after {
  content: '';
  position: absolute;
  right: 1rem;
  bottom: 1.15rem;
  width: 0;
  height: 0;
  border-left: 0.4rem solid transparent;
  border-right: 0.4rem solid transparent;
  border-top: 0.4rem solid #545456;
  pointer-events: none;
}

.c2 {
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: #545456;
  background-color: #FFF;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  font-style: normal;
  border-width: 1px;
  border-color: #F36331;
  border-style: solid;
  border-radius: 0.25rem;
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c2:disabled {
  color: #545456;
  border-color: #CCC;
  background: #F8F8F8;
  cursor: not-allowed;
}

.c2:required:invalid {
  color: #999B9E;
}

.c2 option[value=''][disabled] {
  display: none;
}

.c2 option {
  color: #545456;
}

.c2:active:not(:disabled),
.c2:focus:not(:disabled) {
  box-shadow: 0 0 0 1px transparent;
}

<ForwardRef(SingleDropdownWithRef)
  error="error"
  items={
    Array [
      Object {
        "text": "Item1",
        "value": 1,
      },
      Object {
        "text": "Item2",
        "value": 2,
      },
      Object {
        "text": "Item3",
        "value": 3,
      },
      Object {
        "text": "Item4",
        "value": 4,
      },
      Object {
        "text": "Item5",
        "value": 5,
      },
      Object {
        "text": "Item6",
        "value": 6,
      },
      Object {
        "text": "Item7",
        "value": 7,
      },
      Object {
        "text": "Item8",
        "value": 8,
      },
      Object {
        "text": "Item9",
        "value": 9,
      },
    ]
  }
>
  <SingleDropdown
    capitalize={false}
    error="error"
    forwardRef={null}
    italic={false}
    items={
      Array [
        Object {
          "text": "Item1",
          "value": 1,
        },
        Object {
          "text": "Item2",
          "value": 2,
        },
        Object {
          "text": "Item3",
          "value": 3,
        },
        Object {
          "text": "Item4",
          "value": 4,
        },
        Object {
          "text": "Item5",
          "value": 5,
        },
        Object {
          "text": "Item6",
          "value": 6,
        },
        Object {
          "text": "Item7",
          "value": 7,
        },
        Object {
          "text": "Item8",
          "value": 8,
        },
        Object {
          "text": "Item9",
          "value": 9,
        },
      ]
    }
    uppercase={false}
    width="100%"
  >
    <styled.div
      width="100%"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-iwsKbI",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                "
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100%;
  width: ",
                [Function],
                ";
  box-sizing: border-box;

  &::after {
    content: '';
    position: absolute;
    right: 1rem;
    bottom: 1.15rem;
    width: 0;
    height: 0;
    border-left: 0.4rem solid transparent;
    border-right: 0.4rem solid transparent;
    border-top: 0.4rem solid ",
                [Function],
                ";
    pointer-events: none;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-iwsKbI",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        width="100%"
      >
        <div
          className="c0"
          width="100%"
        >
          <styled.label
            error={true}
          >
            <StyledComponent
              error={true}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  font-family: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  padding-bottom: 0.5rem;
  color: ",
                      [Function],
                      ";
  ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.label",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "label",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <label
                className="c1"
              >
                error
              </label>
            </StyledComponent>
          </styled.label>
          <styled.select
            capitalize={false}
            error="error"
            italic={false}
            uppercase={false}
          >
            <StyledComponent
              capitalize={false}
              error="error"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gZMcBi",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      "
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: ",
                      [Function],
                      ";
  background-color: ",
                      [Function],
                      ";
  appearance: none;
  font-family: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  font-style: ",
                      [Function],
                      ";
  border-width: 1px;
  border-color: ",
                      [Function],
                      ";
  border-style: solid;
  border-radius: ",
                      [Function],
                      ";
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    background: ",
                      [Function],
                      ";
    cursor: not-allowed;
  }

  &:required:invalid {
    color: ",
                      [Function],
                      ";
  }

  option[value=''][disabled] {
    display: none;
  }

  option {
    color: ",
                      [Function],
                      ";
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.select",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gZMcBi",
                  "target": "select",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              italic={false}
              uppercase={false}
            >
              <select
                className="c2"
              >
                <option
                  key="1"
                  value={1}
                >
                  Item1
                </option>
                <option
                  key="2"
                  value={2}
                >
                  Item2
                </option>
                <option
                  key="3"
                  value={3}
                >
                  Item3
                </option>
                <option
                  key="4"
                  value={4}
                >
                  Item4
                </option>
                <option
                  key="5"
                  value={5}
                >
                  Item5
                </option>
                <option
                  key="6"
                  value={6}
                >
                  Item6
                </option>
                <option
                  key="7"
                  value={7}
                >
                  Item7
                </option>
                <option
                  key="8"
                  value={8}
                >
                  Item8
                </option>
                <option
                  key="9"
                  value={9}
                >
                  Item9
                </option>
              </select>
            </StyledComponent>
          </styled.select>
        </div>
      </StyledComponent>
    </styled.div>
  </SingleDropdown>
</ForwardRef(SingleDropdownWithRef)>
`;

exports[`SingleDropdown should render correctly with italic 1`] = `
.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
}

.c0::after {
  content: '';
  position: absolute;
  right: 1rem;
  bottom: 1.15rem;
  width: 0;
  height: 0;
  border-left: 0.4rem solid transparent;
  border-right: 0.4rem solid transparent;
  border-top: 0.4rem solid #545456;
  pointer-events: none;
}

.c1 {
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: #545456;
  background-color: #FFF;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  font-style: italic;
  border-width: 1px;
  border-color: #CCC;
  border-style: solid;
  border-radius: 0.25rem;
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c1:disabled {
  color: #545456;
  border-color: #CCC;
  background: #F8F8F8;
  cursor: not-allowed;
}

.c1:required:invalid {
  color: #999B9E;
}

.c1 option[value=''][disabled] {
  display: none;
}

.c1 option {
  color: #545456;
}

.c1:active:not(:disabled),
.c1:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #10ADE4;
}

<ForwardRef(SingleDropdownWithRef)
  italic={true}
  items={
    Array [
      Object {
        "text": "Item1",
        "value": 1,
      },
      Object {
        "text": "Item2",
        "value": 2,
      },
      Object {
        "text": "Item3",
        "value": 3,
      },
      Object {
        "text": "Item4",
        "value": 4,
      },
      Object {
        "text": "Item5",
        "value": 5,
      },
      Object {
        "text": "Item6",
        "value": 6,
      },
      Object {
        "text": "Item7",
        "value": 7,
      },
      Object {
        "text": "Item8",
        "value": 8,
      },
      Object {
        "text": "Item9",
        "value": 9,
      },
    ]
  }
  onChange={[MockFunction]}
>
  <SingleDropdown
    capitalize={false}
    forwardRef={null}
    italic={true}
    items={
      Array [
        Object {
          "text": "Item1",
          "value": 1,
        },
        Object {
          "text": "Item2",
          "value": 2,
        },
        Object {
          "text": "Item3",
          "value": 3,
        },
        Object {
          "text": "Item4",
          "value": 4,
        },
        Object {
          "text": "Item5",
          "value": 5,
        },
        Object {
          "text": "Item6",
          "value": 6,
        },
        Object {
          "text": "Item7",
          "value": 7,
        },
        Object {
          "text": "Item8",
          "value": 8,
        },
        Object {
          "text": "Item9",
          "value": 9,
        },
      ]
    }
    onChange={[MockFunction]}
    uppercase={false}
    width="100%"
  >
    <styled.div
      width="100%"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-iwsKbI",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                "
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100%;
  width: ",
                [Function],
                ";
  box-sizing: border-box;

  &::after {
    content: '';
    position: absolute;
    right: 1rem;
    bottom: 1.15rem;
    width: 0;
    height: 0;
    border-left: 0.4rem solid transparent;
    border-right: 0.4rem solid transparent;
    border-top: 0.4rem solid ",
                [Function],
                ";
    pointer-events: none;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-iwsKbI",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        width="100%"
      >
        <div
          className="c0"
          width="100%"
        >
          <styled.select
            capitalize={false}
            italic={true}
            onChange={[MockFunction]}
            uppercase={false}
          >
            <StyledComponent
              capitalize={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gZMcBi",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: ",
                      [Function],
                      ";
  background-color: ",
                      [Function],
                      ";
  appearance: none;
  font-family: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  font-style: ",
                      [Function],
                      ";
  border-width: 1px;
  border-color: ",
                      [Function],
                      ";
  border-style: solid;
  border-radius: ",
                      [Function],
                      ";
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    background: ",
                      [Function],
                      ";
    cursor: not-allowed;
  }

  &:required:invalid {
    color: ",
                      [Function],
                      ";
  }

  option[value=''][disabled] {
    display: none;
  }

  option {
    color: ",
                      [Function],
                      ";
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.select",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gZMcBi",
                  "target": "select",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              italic={true}
              onChange={[MockFunction]}
              uppercase={false}
            >
              <select
                className="c1"
                onChange={[MockFunction]}
              >
                <option
                  key="1"
                  value={1}
                >
                  Item1
                </option>
                <option
                  key="2"
                  value={2}
                >
                  Item2
                </option>
                <option
                  key="3"
                  value={3}
                >
                  Item3
                </option>
                <option
                  key="4"
                  value={4}
                >
                  Item4
                </option>
                <option
                  key="5"
                  value={5}
                >
                  Item5
                </option>
                <option
                  key="6"
                  value={6}
                >
                  Item6
                </option>
                <option
                  key="7"
                  value={7}
                >
                  Item7
                </option>
                <option
                  key="8"
                  value={8}
                >
                  Item8
                </option>
                <option
                  key="9"
                  value={9}
                >
                  Item9
                </option>
              </select>
            </StyledComponent>
          </styled.select>
        </div>
      </StyledComponent>
    </styled.div>
  </SingleDropdown>
</ForwardRef(SingleDropdownWithRef)>
`;

exports[`SingleDropdown should render correctly with label="label" 1`] = `
.c1 {
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 0.875rem;
  padding-bottom: 0.5rem;
  color: #757679;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
}

.c0::after {
  content: '';
  position: absolute;
  right: 1rem;
  bottom: 1.15rem;
  width: 0;
  height: 0;
  border-left: 0.4rem solid transparent;
  border-right: 0.4rem solid transparent;
  border-top: 0.4rem solid #545456;
  pointer-events: none;
}

.c2 {
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: #545456;
  background-color: #FFF;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  font-style: normal;
  border-width: 1px;
  border-color: #CCC;
  border-style: solid;
  border-radius: 0.25rem;
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c2:disabled {
  color: #545456;
  border-color: #CCC;
  background: #F8F8F8;
  cursor: not-allowed;
}

.c2:required:invalid {
  color: #999B9E;
}

.c2 option[value=''][disabled] {
  display: none;
}

.c2 option {
  color: #545456;
}

.c2:active:not(:disabled),
.c2:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #10ADE4;
}

<ForwardRef(SingleDropdownWithRef)
  items={
    Array [
      Object {
        "text": "Item1",
        "value": 1,
      },
      Object {
        "text": "Item2",
        "value": 2,
      },
      Object {
        "text": "Item3",
        "value": 3,
      },
      Object {
        "text": "Item4",
        "value": 4,
      },
      Object {
        "text": "Item5",
        "value": 5,
      },
      Object {
        "text": "Item6",
        "value": 6,
      },
      Object {
        "text": "Item7",
        "value": 7,
      },
      Object {
        "text": "Item8",
        "value": 8,
      },
      Object {
        "text": "Item9",
        "value": 9,
      },
    ]
  }
  label="label"
>
  <SingleDropdown
    capitalize={false}
    forwardRef={null}
    italic={false}
    items={
      Array [
        Object {
          "text": "Item1",
          "value": 1,
        },
        Object {
          "text": "Item2",
          "value": 2,
        },
        Object {
          "text": "Item3",
          "value": 3,
        },
        Object {
          "text": "Item4",
          "value": 4,
        },
        Object {
          "text": "Item5",
          "value": 5,
        },
        Object {
          "text": "Item6",
          "value": 6,
        },
        Object {
          "text": "Item7",
          "value": 7,
        },
        Object {
          "text": "Item8",
          "value": 8,
        },
        Object {
          "text": "Item9",
          "value": 9,
        },
      ]
    }
    label="label"
    uppercase={false}
    width="100%"
  >
    <styled.div
      width="100%"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-iwsKbI",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                "
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100%;
  width: ",
                [Function],
                ";
  box-sizing: border-box;

  &::after {
    content: '';
    position: absolute;
    right: 1rem;
    bottom: 1.15rem;
    width: 0;
    height: 0;
    border-left: 0.4rem solid transparent;
    border-right: 0.4rem solid transparent;
    border-top: 0.4rem solid ",
                [Function],
                ";
    pointer-events: none;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-iwsKbI",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        width="100%"
      >
        <div
          className="c0"
          width="100%"
        >
          <styled.label
            error={false}
          >
            <StyledComponent
              error={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  font-family: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  padding-bottom: 0.5rem;
  color: ",
                      [Function],
                      ";
  ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.label",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "label",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <label
                className="c1"
              >
                label
              </label>
            </StyledComponent>
          </styled.label>
          <styled.select
            capitalize={false}
            italic={false}
            label="label"
            uppercase={false}
          >
            <StyledComponent
              capitalize={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gZMcBi",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      "
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: ",
                      [Function],
                      ";
  background-color: ",
                      [Function],
                      ";
  appearance: none;
  font-family: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  font-style: ",
                      [Function],
                      ";
  border-width: 1px;
  border-color: ",
                      [Function],
                      ";
  border-style: solid;
  border-radius: ",
                      [Function],
                      ";
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    background: ",
                      [Function],
                      ";
    cursor: not-allowed;
  }

  &:required:invalid {
    color: ",
                      [Function],
                      ";
  }

  option[value=''][disabled] {
    display: none;
  }

  option {
    color: ",
                      [Function],
                      ";
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.select",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gZMcBi",
                  "target": "select",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              italic={false}
              label="label"
              uppercase={false}
            >
              <select
                className="c2"
                label="label"
              >
                <option
                  key="1"
                  value={1}
                >
                  Item1
                </option>
                <option
                  key="2"
                  value={2}
                >
                  Item2
                </option>
                <option
                  key="3"
                  value={3}
                >
                  Item3
                </option>
                <option
                  key="4"
                  value={4}
                >
                  Item4
                </option>
                <option
                  key="5"
                  value={5}
                >
                  Item5
                </option>
                <option
                  key="6"
                  value={6}
                >
                  Item6
                </option>
                <option
                  key="7"
                  value={7}
                >
                  Item7
                </option>
                <option
                  key="8"
                  value={8}
                >
                  Item8
                </option>
                <option
                  key="9"
                  value={9}
                >
                  Item9
                </option>
              </select>
            </StyledComponent>
          </styled.select>
        </div>
      </StyledComponent>
    </styled.div>
  </SingleDropdown>
</ForwardRef(SingleDropdownWithRef)>
`;

exports[`SingleDropdown should render correctly with label="label" and error="error" 1`] = `
.c1 {
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 0.875rem;
  padding-bottom: 0.5rem;
  color: #F36331;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
}

.c0::after {
  content: '';
  position: absolute;
  right: 1rem;
  bottom: 1.15rem;
  width: 0;
  height: 0;
  border-left: 0.4rem solid transparent;
  border-right: 0.4rem solid transparent;
  border-top: 0.4rem solid #545456;
  pointer-events: none;
}

.c2 {
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: #545456;
  background-color: #FFF;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  font-style: normal;
  border-width: 1px;
  border-color: #F36331;
  border-style: solid;
  border-radius: 0.25rem;
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c2:disabled {
  color: #545456;
  border-color: #CCC;
  background: #F8F8F8;
  cursor: not-allowed;
}

.c2:required:invalid {
  color: #999B9E;
}

.c2 option[value=''][disabled] {
  display: none;
}

.c2 option {
  color: #545456;
}

.c2:active:not(:disabled),
.c2:focus:not(:disabled) {
  box-shadow: 0 0 0 1px transparent;
}

<ForwardRef(SingleDropdownWithRef)
  error="error"
  items={
    Array [
      Object {
        "text": "Item1",
        "value": 1,
      },
      Object {
        "text": "Item2",
        "value": 2,
      },
      Object {
        "text": "Item3",
        "value": 3,
      },
      Object {
        "text": "Item4",
        "value": 4,
      },
      Object {
        "text": "Item5",
        "value": 5,
      },
      Object {
        "text": "Item6",
        "value": 6,
      },
      Object {
        "text": "Item7",
        "value": 7,
      },
      Object {
        "text": "Item8",
        "value": 8,
      },
      Object {
        "text": "Item9",
        "value": 9,
      },
    ]
  }
  label="label"
>
  <SingleDropdown
    capitalize={false}
    error="error"
    forwardRef={null}
    italic={false}
    items={
      Array [
        Object {
          "text": "Item1",
          "value": 1,
        },
        Object {
          "text": "Item2",
          "value": 2,
        },
        Object {
          "text": "Item3",
          "value": 3,
        },
        Object {
          "text": "Item4",
          "value": 4,
        },
        Object {
          "text": "Item5",
          "value": 5,
        },
        Object {
          "text": "Item6",
          "value": 6,
        },
        Object {
          "text": "Item7",
          "value": 7,
        },
        Object {
          "text": "Item8",
          "value": 8,
        },
        Object {
          "text": "Item9",
          "value": 9,
        },
      ]
    }
    label="label"
    uppercase={false}
    width="100%"
  >
    <styled.div
      width="100%"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-iwsKbI",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                "
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100%;
  width: ",
                [Function],
                ";
  box-sizing: border-box;

  &::after {
    content: '';
    position: absolute;
    right: 1rem;
    bottom: 1.15rem;
    width: 0;
    height: 0;
    border-left: 0.4rem solid transparent;
    border-right: 0.4rem solid transparent;
    border-top: 0.4rem solid ",
                [Function],
                ";
    pointer-events: none;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-iwsKbI",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        width="100%"
      >
        <div
          className="c0"
          width="100%"
        >
          <styled.label
            error={true}
          >
            <StyledComponent
              error={true}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  font-family: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  padding-bottom: 0.5rem;
  color: ",
                      [Function],
                      ";
  ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.label",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "label",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <label
                className="c1"
              >
                label - error
              </label>
            </StyledComponent>
          </styled.label>
          <styled.select
            capitalize={false}
            error="error"
            italic={false}
            label="label"
            uppercase={false}
          >
            <StyledComponent
              capitalize={false}
              error="error"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gZMcBi",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      "
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: ",
                      [Function],
                      ";
  background-color: ",
                      [Function],
                      ";
  appearance: none;
  font-family: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  font-style: ",
                      [Function],
                      ";
  border-width: 1px;
  border-color: ",
                      [Function],
                      ";
  border-style: solid;
  border-radius: ",
                      [Function],
                      ";
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    background: ",
                      [Function],
                      ";
    cursor: not-allowed;
  }

  &:required:invalid {
    color: ",
                      [Function],
                      ";
  }

  option[value=''][disabled] {
    display: none;
  }

  option {
    color: ",
                      [Function],
                      ";
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.select",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gZMcBi",
                  "target": "select",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              italic={false}
              label="label"
              uppercase={false}
            >
              <select
                className="c2"
                label="label"
              >
                <option
                  key="1"
                  value={1}
                >
                  Item1
                </option>
                <option
                  key="2"
                  value={2}
                >
                  Item2
                </option>
                <option
                  key="3"
                  value={3}
                >
                  Item3
                </option>
                <option
                  key="4"
                  value={4}
                >
                  Item4
                </option>
                <option
                  key="5"
                  value={5}
                >
                  Item5
                </option>
                <option
                  key="6"
                  value={6}
                >
                  Item6
                </option>
                <option
                  key="7"
                  value={7}
                >
                  Item7
                </option>
                <option
                  key="8"
                  value={8}
                >
                  Item8
                </option>
                <option
                  key="9"
                  value={9}
                >
                  Item9
                </option>
              </select>
            </StyledComponent>
          </styled.select>
        </div>
      </StyledComponent>
    </styled.div>
  </SingleDropdown>
</ForwardRef(SingleDropdownWithRef)>
`;

exports[`SingleDropdown should render correctly with placeholder 1`] = `
.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
}

.c0::after {
  content: '';
  position: absolute;
  right: 1rem;
  bottom: 1.15rem;
  width: 0;
  height: 0;
  border-left: 0.4rem solid transparent;
  border-right: 0.4rem solid transparent;
  border-top: 0.4rem solid #545456;
  pointer-events: none;
}

.c1 {
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: #545456;
  background-color: #FFF;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  font-style: normal;
  border-width: 1px;
  border-color: #CCC;
  border-style: solid;
  border-radius: 0.25rem;
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c1:disabled {
  color: #545456;
  border-color: #CCC;
  background: #F8F8F8;
  cursor: not-allowed;
}

.c1:required:invalid {
  color: #999B9E;
}

.c1 option[value=''][disabled] {
  display: none;
}

.c1 option {
  color: #545456;
}

.c1:active:not(:disabled),
.c1:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #10ADE4;
}

<ForwardRef(SingleDropdownWithRef)
  items={
    Array [
      Object {
        "text": "Item1",
        "value": 1,
      },
      Object {
        "text": "Item2",
        "value": 2,
      },
      Object {
        "text": "Item3",
        "value": 3,
      },
      Object {
        "text": "Item4",
        "value": 4,
      },
      Object {
        "text": "Item5",
        "value": 5,
      },
      Object {
        "text": "Item6",
        "value": 6,
      },
      Object {
        "text": "Item7",
        "value": 7,
      },
      Object {
        "text": "Item8",
        "value": 8,
      },
      Object {
        "text": "Item9",
        "value": 9,
      },
    ]
  }
  onChange={[MockFunction]}
  placeholder="Select"
>
  <SingleDropdown
    capitalize={false}
    forwardRef={null}
    italic={false}
    items={
      Array [
        Object {
          "text": "Item1",
          "value": 1,
        },
        Object {
          "text": "Item2",
          "value": 2,
        },
        Object {
          "text": "Item3",
          "value": 3,
        },
        Object {
          "text": "Item4",
          "value": 4,
        },
        Object {
          "text": "Item5",
          "value": 5,
        },
        Object {
          "text": "Item6",
          "value": 6,
        },
        Object {
          "text": "Item7",
          "value": 7,
        },
        Object {
          "text": "Item8",
          "value": 8,
        },
        Object {
          "text": "Item9",
          "value": 9,
        },
      ]
    }
    onChange={[MockFunction]}
    placeholder="Select"
    uppercase={false}
    width="100%"
  >
    <styled.div
      width="100%"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-iwsKbI",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                "
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100%;
  width: ",
                [Function],
                ";
  box-sizing: border-box;

  &::after {
    content: '';
    position: absolute;
    right: 1rem;
    bottom: 1.15rem;
    width: 0;
    height: 0;
    border-left: 0.4rem solid transparent;
    border-right: 0.4rem solid transparent;
    border-top: 0.4rem solid ",
                [Function],
                ";
    pointer-events: none;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-iwsKbI",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        width="100%"
      >
        <div
          className="c0"
          width="100%"
        >
          <styled.select
            capitalize={false}
            defaultValue=""
            italic={false}
            onChange={[MockFunction]}
            uppercase={false}
          >
            <StyledComponent
              capitalize={false}
              defaultValue=""
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gZMcBi",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: ",
                      [Function],
                      ";
  background-color: ",
                      [Function],
                      ";
  appearance: none;
  font-family: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  font-style: ",
                      [Function],
                      ";
  border-width: 1px;
  border-color: ",
                      [Function],
                      ";
  border-style: solid;
  border-radius: ",
                      [Function],
                      ";
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    background: ",
                      [Function],
                      ";
    cursor: not-allowed;
  }

  &:required:invalid {
    color: ",
                      [Function],
                      ";
  }

  option[value=''][disabled] {
    display: none;
  }

  option {
    color: ",
                      [Function],
                      ";
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.select",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gZMcBi",
                  "target": "select",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              italic={false}
              onChange={[MockFunction]}
              uppercase={false}
            >
              <select
                className="c1"
                defaultValue=""
                onChange={[MockFunction]}
              >
                <option
                  disabled={true}
                  hidden={true}
                  label="Select"
                  value=""
                />
                <option
                  key="1"
                  value={1}
                >
                  Item1
                </option>
                <option
                  key="2"
                  value={2}
                >
                  Item2
                </option>
                <option
                  key="3"
                  value={3}
                >
                  Item3
                </option>
                <option
                  key="4"
                  value={4}
                >
                  Item4
                </option>
                <option
                  key="5"
                  value={5}
                >
                  Item5
                </option>
                <option
                  key="6"
                  value={6}
                >
                  Item6
                </option>
                <option
                  key="7"
                  value={7}
                >
                  Item7
                </option>
                <option
                  key="8"
                  value={8}
                >
                  Item8
                </option>
                <option
                  key="9"
                  value={9}
                >
                  Item9
                </option>
              </select>
            </StyledComponent>
          </styled.select>
        </div>
      </StyledComponent>
    </styled.div>
  </SingleDropdown>
</ForwardRef(SingleDropdownWithRef)>
`;

exports[`SingleDropdown should render correctly with uppercase 1`] = `
.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
}

.c0::after {
  content: '';
  position: absolute;
  right: 1rem;
  bottom: 1.15rem;
  width: 0;
  height: 0;
  border-left: 0.4rem solid transparent;
  border-right: 0.4rem solid transparent;
  border-top: 0.4rem solid #545456;
  pointer-events: none;
}

.c1 {
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: #545456;
  background-color: #FFF;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-size: 1rem;
  font-style: normal;
  border-width: 1px;
  border-color: #CCC;
  border-style: solid;
  border-radius: 0.25rem;
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c1:disabled {
  color: #545456;
  border-color: #CCC;
  background: #F8F8F8;
  cursor: not-allowed;
}

.c1:required:invalid {
  color: #999B9E;
}

.c1 option[value=''][disabled] {
  display: none;
}

.c1 option {
  color: #545456;
}

.c1:active:not(:disabled),
.c1:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #10ADE4;
}

<ForwardRef(SingleDropdownWithRef)
  items={
    Array [
      Object {
        "text": "Item1",
        "value": 1,
      },
      Object {
        "text": "Item2",
        "value": 2,
      },
      Object {
        "text": "Item3",
        "value": 3,
      },
      Object {
        "text": "Item4",
        "value": 4,
      },
      Object {
        "text": "Item5",
        "value": 5,
      },
      Object {
        "text": "Item6",
        "value": 6,
      },
      Object {
        "text": "Item7",
        "value": 7,
      },
      Object {
        "text": "Item8",
        "value": 8,
      },
      Object {
        "text": "Item9",
        "value": 9,
      },
    ]
  }
  onChange={[MockFunction]}
  uppercase={true}
>
  <SingleDropdown
    capitalize={false}
    forwardRef={null}
    italic={false}
    items={
      Array [
        Object {
          "text": "Item1",
          "value": 1,
        },
        Object {
          "text": "Item2",
          "value": 2,
        },
        Object {
          "text": "Item3",
          "value": 3,
        },
        Object {
          "text": "Item4",
          "value": 4,
        },
        Object {
          "text": "Item5",
          "value": 5,
        },
        Object {
          "text": "Item6",
          "value": 6,
        },
        Object {
          "text": "Item7",
          "value": 7,
        },
        Object {
          "text": "Item8",
          "value": 8,
        },
        Object {
          "text": "Item9",
          "value": 9,
        },
      ]
    }
    onChange={[MockFunction]}
    uppercase={true}
    width="100%"
  >
    <styled.div
      width="100%"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-iwsKbI",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                "
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100%;
  width: ",
                [Function],
                ";
  box-sizing: border-box;

  &::after {
    content: '';
    position: absolute;
    right: 1rem;
    bottom: 1.15rem;
    width: 0;
    height: 0;
    border-left: 0.4rem solid transparent;
    border-right: 0.4rem solid transparent;
    border-top: 0.4rem solid ",
                [Function],
                ";
    pointer-events: none;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-iwsKbI",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        width="100%"
      >
        <div
          className="c0"
          width="100%"
        >
          <styled.select
            capitalize={false}
            italic={false}
            onChange={[MockFunction]}
            uppercase={true}
          >
            <StyledComponent
              capitalize={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gZMcBi",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: ",
                      [Function],
                      ";
  background-color: ",
                      [Function],
                      ";
  appearance: none;
  font-family: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  font-style: ",
                      [Function],
                      ";
  border-width: 1px;
  border-color: ",
                      [Function],
                      ";
  border-style: solid;
  border-radius: ",
                      [Function],
                      ";
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    background: ",
                      [Function],
                      ";
    cursor: not-allowed;
  }

  &:required:invalid {
    color: ",
                      [Function],
                      ";
  }

  option[value=''][disabled] {
    display: none;
  }

  option {
    color: ",
                      [Function],
                      ";
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.select",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gZMcBi",
                  "target": "select",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              italic={false}
              onChange={[MockFunction]}
              uppercase={true}
            >
              <select
                className="c1"
                onChange={[MockFunction]}
              >
                <option
                  key="1"
                  value={1}
                >
                  Item1
                </option>
                <option
                  key="2"
                  value={2}
                >
                  Item2
                </option>
                <option
                  key="3"
                  value={3}
                >
                  Item3
                </option>
                <option
                  key="4"
                  value={4}
                >
                  Item4
                </option>
                <option
                  key="5"
                  value={5}
                >
                  Item5
                </option>
                <option
                  key="6"
                  value={6}
                >
                  Item6
                </option>
                <option
                  key="7"
                  value={7}
                >
                  Item7
                </option>
                <option
                  key="8"
                  value={8}
                >
                  Item8
                </option>
                <option
                  key="9"
                  value={9}
                >
                  Item9
                </option>
              </select>
            </StyledComponent>
          </styled.select>
        </div>
      </StyledComponent>
    </styled.div>
  </SingleDropdown>
</ForwardRef(SingleDropdownWithRef)>
`;

exports[`SingleDropdown should render correctly with weight 1`] = `
.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
}

.c0::after {
  content: '';
  position: absolute;
  right: 1rem;
  bottom: 1.15rem;
  width: 0;
  height: 0;
  border-left: 0.4rem solid transparent;
  border-right: 0.4rem solid transparent;
  border-top: 0.4rem solid #545456;
  pointer-events: none;
}

.c1 {
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: #545456;
  background-color: #FFF;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-weight: 500;
  font-size: 1rem;
  font-style: normal;
  border-width: 1px;
  border-color: #CCC;
  border-style: solid;
  border-radius: 0.25rem;
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  -webkit-transition: box-shadow 0.25s ease-out;
  transition: box-shadow 0.25s ease-out;
}

.c1:disabled {
  color: #545456;
  border-color: #CCC;
  background: #F8F8F8;
  cursor: not-allowed;
}

.c1:required:invalid {
  color: #999B9E;
}

.c1 option[value=''][disabled] {
  display: none;
}

.c1 option {
  color: #545456;
}

.c1:active:not(:disabled),
.c1:focus:not(:disabled) {
  box-shadow: 0 0 0 1px #10ADE4;
}

<ForwardRef(SingleDropdownWithRef)
  items={
    Array [
      Object {
        "text": "Item1",
        "value": 1,
      },
      Object {
        "text": "Item2",
        "value": 2,
      },
      Object {
        "text": "Item3",
        "value": 3,
      },
      Object {
        "text": "Item4",
        "value": 4,
      },
      Object {
        "text": "Item5",
        "value": 5,
      },
      Object {
        "text": "Item6",
        "value": 6,
      },
      Object {
        "text": "Item7",
        "value": 7,
      },
      Object {
        "text": "Item8",
        "value": 8,
      },
      Object {
        "text": "Item9",
        "value": 9,
      },
    ]
  }
  onChange={[MockFunction]}
  weight={500}
>
  <SingleDropdown
    capitalize={false}
    forwardRef={null}
    italic={false}
    items={
      Array [
        Object {
          "text": "Item1",
          "value": 1,
        },
        Object {
          "text": "Item2",
          "value": 2,
        },
        Object {
          "text": "Item3",
          "value": 3,
        },
        Object {
          "text": "Item4",
          "value": 4,
        },
        Object {
          "text": "Item5",
          "value": 5,
        },
        Object {
          "text": "Item6",
          "value": 6,
        },
        Object {
          "text": "Item7",
          "value": 7,
        },
        Object {
          "text": "Item8",
          "value": 8,
        },
        Object {
          "text": "Item9",
          "value": 9,
        },
      ]
    }
    onChange={[MockFunction]}
    uppercase={false}
    weight={500}
    width="100%"
  >
    <styled.div
      width="100%"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-iwsKbI",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                "
  position: relative;
  display: flex;
  flex-direction: column;
  height: 100%;
  width: ",
                [Function],
                ";
  box-sizing: border-box;

  &::after {
    content: '';
    position: absolute;
    right: 1rem;
    bottom: 1.15rem;
    width: 0;
    height: 0;
    border-left: 0.4rem solid transparent;
    border-right: 0.4rem solid transparent;
    border-top: 0.4rem solid ",
                [Function],
                ";
    pointer-events: none;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-iwsKbI",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        width="100%"
      >
        <div
          className="c0"
          width="100%"
        >
          <styled.select
            capitalize={false}
            italic={false}
            onChange={[MockFunction]}
            uppercase={false}
            weight={500}
          >
            <StyledComponent
              capitalize={false}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gZMcBi",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  width: 100%;
  height: 2.7rem;
  padding: 0 2.4rem 0 1rem;
  color: ",
                      [Function],
                      ";
  background-color: ",
                      [Function],
                      ";
  appearance: none;
  font-family: ",
                      [Function],
                      ";
  font-weight: ",
                      [Function],
                      ";
  font-size: ",
                      [Function],
                      ";
  font-style: ",
                      [Function],
                      ";
  border-width: 1px;
  border-color: ",
                      [Function],
                      ";
  border-style: solid;
  border-radius: ",
                      [Function],
                      ";
  cursor: pointer;
  outline: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: box-shadow 0.25s ease-out;

  &:disabled {
    color: ",
                      [Function],
                      ";
    border-color: ",
                      [Function],
                      ";
    background: ",
                      [Function],
                      ";
    cursor: not-allowed;
  }

  &:required:invalid {
    color: ",
                      [Function],
                      ";
  }

  option[value=''][disabled] {
    display: none;
  }

  option {
    color: ",
                      [Function],
                      ";
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    box-shadow: 0 0 0 1px
      ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.select",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gZMcBi",
                  "target": "select",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              italic={false}
              onChange={[MockFunction]}
              uppercase={false}
              weight={500}
            >
              <select
                className="c1"
                onChange={[MockFunction]}
              >
                <option
                  key="1"
                  value={1}
                >
                  Item1
                </option>
                <option
                  key="2"
                  value={2}
                >
                  Item2
                </option>
                <option
                  key="3"
                  value={3}
                >
                  Item3
                </option>
                <option
                  key="4"
                  value={4}
                >
                  Item4
                </option>
                <option
                  key="5"
                  value={5}
                >
                  Item5
                </option>
                <option
                  key="6"
                  value={6}
                >
                  Item6
                </option>
                <option
                  key="7"
                  value={7}
                >
                  Item7
                </option>
                <option
                  key="8"
                  value={8}
                >
                  Item8
                </option>
                <option
                  key="9"
                  value={9}
                >
                  Item9
                </option>
              </select>
            </StyledComponent>
          </styled.select>
        </div>
      </StyledComponent>
    </styled.div>
  </SingleDropdown>
</ForwardRef(SingleDropdownWithRef)>
`;
