// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NavbarDropdownItem should render correctly 1`] = `
.c1 {
  font-family: 'IBM Plex Sans','Helvetica Neue',Arial,sans-serif;
  font-weight: 400;
  font-size: 1rem;
  text-transform: none;
  font-style: normal;
  color: #0C6CF2;
  opacity: 1;
  cursor: pointer;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c1:hover {
  color: #144699;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  height: 2.5rem;
  margin-bottom: 1.5rem;
  white-space: nowrap;
  -webkit-text-decoration: none;
  text-decoration: none;
}

@media (min-width:48rem) {
  .c0:hover span:first-child {
    -webkit-text-decoration: underline;
    text-decoration: underline;
  }
}

<NavbarDropdownItem>
  <Styled(Link)>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: flex-start;
  flex-wrap: nowrap;
  height: 2.5rem;
  margin-bottom: 1.5rem;
  white-space: nowrap;
  text-decoration: none;

  @media (min-width: ",
              [Function],
              ") {
    &:hover span:first-child {
      text-decoration: underline;
    }
  }
",
            ],
          },
          "displayName": "Styled(Link)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
    >
      <Link
        capitalize={false}
        className="c0"
        e2e="defaultLink"
        italic={false}
        opacity={1}
        size="1rem"
        uppercase={false}
        weight={400}
      >
        <styled.a
          capitalize={false}
          className="c0"
          e2e="defaultLink"
          italic={false}
          opacity={1}
          size="1rem"
          uppercase={false}
          weight={400}
        >
          <StyledComponent
            capitalize={false}
            className="c0"
            e2e="defaultLink"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  font-family: ",
                    [Function],
                    ";
  font-weight: ",
                    [Function],
                    ";
  font-size: ",
                    [Function],
                    ";
  text-transform: ",
                    [Function],
                    ";
  font-style: ",
                    [Function],
                    ";
  color: ",
                    [Function],
                    ";
  opacity: ",
                    [Function],
                    ";
  cursor: pointer;
  text-decoration: none;

  &:hover {
    color: ",
                    [Function],
                    ";
    text-decoration: none;
  }
",
                  ],
                },
                "displayName": "styled.a",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": "a",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            italic={false}
            opacity={1}
            size="1rem"
            uppercase={false}
            weight={400}
          >
            <a
              className="c0 c1"
              data-e2e="defaultLink"
              opacity={1}
              size="1rem"
            />
          </StyledComponent>
        </styled.a>
      </Link>
    </StyledComponent>
  </Styled(Link)>
</NavbarDropdownItem>
`;
